rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
     function isAuthenticated() {
      return request.auth != null;
    }

    function isClubMember(clubId) {
      return isAuthenticated() && request.auth.token.clubId == clubId;
    }

    function isClubAdmin(clubId) {
      return isClubMember(clubId) && request.auth.token.admin == true;
    }

    function isTableAdmin(clubId, tableId) {
      return isClubMember(clubId) && request.auth.token.tableId == tableId;
    }

    match /clubs/{clubId} {
      allow read: if isClubMember(clubId);
      allow update: if isClubAdmin(clubId) &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name']) &&
                      request.resource.data.name.size() > 0 &&
                      request.resource.data.name.size() < 128;

      match /tables/{tableId} {
        allow read, create, delete: if isClubAdmin(clubId);
      }
    }

    match /games/{gameId} {
      function canReadGame() {
        let clubId = get(resource.data.club).id;
        let tableId = get(resource.data.table).id;
        return isClubAdmin(clubId) || isTableAdmin(clubId, tableId);
      }
      function canWriteGame() {
        let clubId = get(resource.data.club).id;
        let tableId = get(resource.data.table).id;
        return isTableAdmin(clubId, tableId);
      }
      function modifiesStateOrMode() {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['state', 'mode']);
      }

      allow read: if canReadGame();
      allow update: if canWriteGame() && modifiesStateOrMode();
    }
  }
}